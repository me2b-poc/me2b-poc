import fs from 'fs-extra'
import slugify from 'slugify';
import uuid from 'uuid'

function mapname(name:string,suffix?:string): string {
	if(!suffix)
		suffix=''
	else
		suffix = '_'+suffix;
	return "$__plugins_felixhayashi_tiddlymap_graph_views_"+name+suffix+".tid"
}
function maptitle(name:string,suffix?:string): string {
	if(!suffix)
		suffix=''
	else
		suffix = '/'+suffix;
	return "$:/plugins/felixhayashi/tiddlymap/graph/views/"+name+suffix
}

class SimpleMap implements TiddlyMap {
	name:string

	constructor(name:string) {
		super()
		this.name = name
	}


}

function tiddlerFilePath(base:string,fname:string):string {
	// use appropriate path librarry
	return base + "/" + fname + ".tid"
}

function ensurePath(base:string,dir?:string):string {
	// make sure this exists
	let path = base;
	if (dir)
		path = base + "/" + dir
	fs.ensureDir(path)
	return path
}

export class TiddlerViewFiles {
	tiddler:string
	edges:string
	nodes:string
	layout:string

	constructor(path:string) {
		this.tiddler = tiddlerFilePath(path,"tiddler")
		this.edges = tiddlerFilePath(path,"edges")
		this.nodes = tiddlerFilePath(path,"nodes")
		this.layout = tiddlerFilePath(path,"layout")
	}

}

export class TiddlerMapFileBase {
	path:string
	edgeTypes:string
	nodeTypes:string
	views:string
	viewMap:{ [key:string]: TiddlerViewFiles }

	constructor(path:string) {
		this.path = ensurePath(path)
		this.edgeTypes = ensurePath(path,"edgeTypes")
		this.nodeTypes = ensurePath(path,"nodeTypes")
		this.views = ensurePath(path,"views")
		this.viewMap = {}
	}

	viewFiles(key:string):TiddlerViewFiles {
		if(!this.viewMap[key])
			this.viewMap[key] = new TiddlerViewFiles(ensurePath(this.views,key))
		return this.viewMap[key]
	}

	pathForNodeType(elt:NodeType):string {
		return tiddlerFilePath(this.nodeTypes,elt.tiddlerfile)
	}
	pathForConnectionType(elt:EdgeType):string {
		return tiddlerFilePath(this.edgeTypes,elt.tiddlerfile)
	}

}


export type tiddlydate = string;

export const TIDDLERTYPE="text/vnd.tiddlywiki"

// everything seems to have a GUID
export interface MapNode {
	guid:string
}

// Tiddly
export interface Tiddler extends MapNode {
	created: tiddlydate
	modified: tiddlydate
	title:string
	type:string

	tiddlerfile:string
	tiddlerdata:() => string
}

export interface TiddlerData {
	created?: tiddlydate
	modified?: tiddlydate
	title?:string
	type?:string
	guid?:string
}


export interface TiddlyMap {
	name:string
}


export class SimpleTiddler implements Tiddler
{
	guid:string
	created: tiddlydate
	modified: tiddlydate
	title:string
	type:string
	tiddlerfile:string

	constructor(data:TiddlerData) {
		this.title = data.title || "untitled"
		this.created = data.created || ''
		this.modified = data.modified || ''
		this.type = data.type || TIDDLERTYPE
		this.guid = data.guid || uuid.v4()
		this.tiddlerfile = slugify(title)
	}

	tiddlerdata():string {
		return
			"created:" + this.created + "\n" +
			"modified:" + this.modified + "\n" +
			"title:" + this.title + "\n" +
			"type:" + this.type + "\n";
	}
}

export class NodeTiddler extends SimpleTiddler
{
	tmap_edges: string
	element_type:string
	wiki_text:string
	field_data:string
	//this.fields['tags']=''
	//this.fields['icon']=''
	//this.fields['caption']=''

	constructor(elt:Element) {
		super({
			title:elt.title
		})
		this.element_type = elt.type.title
		this.wiki_text = elt.description
		this.tmap_edges = JSON.stringify(elt.outbound)
		this.field_data = ''
		for (let k in elt.fields) {
			this.field_data = this.field_data + k + ":" + elt.fields[k] + "\n"
		}
	}

	tiddlerdata() {
		return super.tiddlerdata() +
			"element.type:" + this.element_type + "\n" +
			"tmap.id:" + this.guid + "\n" +
			"tmap.edges" + this.tmap_edges + "\n" +
			"field_data:" + this.field_data + "\n" +
			"\n"
			this.wiki_text;
	}
}



export class NodeTypeTiddler extends SimpleTiddler  {
	constructor(data:TiddlerData) {
		super(data)
		//"$:/plugins/felixhayashi/tiddlymap/graph/nodeTypes/"+type)
		//this.tiddlerfile = slugify(type)
	}
}
export class EdgeTypeTiddler extends SimpleTiddler  {
	constructor(data:TiddlerData) {
		super(data)
		//super("$:/plugins/felixhayashi/tiddlymap/graph/edgeTypes/"+type)
		//this.tiddlerfile = slugify(type)
	}
}



export class TiddlerFileBase {
	path:string
	system:string
	templates:string
	maps:TiddlerMapFileBase

	constructor(path:string) {
		this.path = ensurePath(path)
		this.system = ensurePath(path,"system")
		this.templates = ensurePath(path,"templates")
		this.maps = new TiddlerMapFileBase(ensurePath(path,"maps"))
	}

	pathForNode(elt:NodeTiddler):string {
		return tiddlerFilePath(
			ensurePath(this.path,elt.type.title),
			elt.label)
	}

 	async writeElementTiddler(elt:Element) {

		const tidfile=this.pathForElement(elt)

	let contents="tmap.edges:" + JSON.stringify(elt.outbound) + "\n"
	for (let k in elt.fields) {
		contents = contents + k + ":" + elt.fields[k] + "\n"
	}
	contents = contents + "\n" + elt.description
	await fs.writeFile(tidfile,contents)

	//console.log("Wrote",tidfile)

}

export async function writeConnectionTypeTiddler(elt:ConnectionType) {
	const tidfile=filebase.maps.pathForConnectionType(elt)

	console.log("Connection Type",tidfile)

}
export async function writeElementTypeTiddler(elt:ElementType) {

	const tidfile=filebase.maps.pathForElementType(elt)

	console.log("Element Type",tidfile)

}
